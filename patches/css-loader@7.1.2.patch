# postcss-loader and css-loader use `semver` to compare PostCSS ast version,
# Rsbuild uses the same PostCSS version and do not need the comparison.
diff --git a/dist/index.js b/dist/index.js
index 11afa0f317e59dd940048aa732aa8d3a0c336370..b638b4d7758273ac55654f2b188b780f095dc6fa 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -5,9 +5,6 @@ Object.defineProperty(exports, "__esModule", {
 });
 exports.default = loader;
 var _postcss = _interopRequireDefault(require("postcss"));
-var _package = _interopRequireDefault(require("postcss/package.json"));
-var _semver = require("semver");
-var _options = _interopRequireDefault(require("./options.json"));
 var _plugins = require("./plugins");
 var _utils = require("./utils");
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
@@ -17,7 +14,7 @@ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { de
 */
 
 async function loader(content, map, meta) {
-  const rawOptions = this.getOptions(_options.default);
+  const rawOptions = this.getOptions();
   const callback = this.async();
   if (this._compiler && this._compiler.options && this._compiler.options.experiments && this._compiler.options.experiments.css && this._module && (this._module.type === "css" || this._module.type === "css/auto" || this._module.type === "css/global" || this._module.type === "css/module")) {
     this.emitWarning(new Error('You can\'t use `experiments.css` (`experiments.futureDefaults` enable built-in CSS support by default) and `css-loader` together, please set `experiments.css` to `false` or set `{ type: "javascript/auto" }` for rules with `css-loader` in your webpack config (now css-loader does nothing).'));
@@ -98,7 +95,7 @@ async function loader(content, map, meta) {
     const {
       ast
     } = meta;
-    if (ast && ast.type === "postcss" && (0, _semver.satisfies)(ast.version, `^${_package.default.version}`)) {
+    if (ast && ast.type === "postcss" ) {
       // eslint-disable-next-line no-param-reassign
       content = ast.root;
     }
